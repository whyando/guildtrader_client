/*
 * guildtrader
 *
 * Guildtrader API
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "item")]
    pub item: String,
    #[serde(rename = "quantity")]
    pub quantity: i64,
    #[serde(rename = "price")]
    pub price: i64,
    #[serde(rename = "total_price")]
    pub total_price: i64,
}

impl Trade {
    pub fn new(r#type: Type, item: String, quantity: i64, price: i64, total_price: i64) -> Trade {
        Trade {
            r#type,
            item,
            quantity,
            price,
            total_price,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for Type {
    fn default() -> Type {
        Self::Buy
    }
}

