/*
 * guildtrader
 *
 * Guildtrader API
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cancel200Response {
    #[serde(rename = "contract")]
    pub contract: Box<models::Contract>,
    #[serde(rename = "rewards")]
    pub rewards: std::collections::HashMap<String, i64>,
    #[serde(rename = "refund", skip_serializing_if = "Option::is_none")]
    pub refund: Option<Box<models::Cancel200ResponseRefund>>,
    #[serde(rename = "unlocked_items", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unlocked_items: Option<Option<Vec<String>>>,
}

impl Cancel200Response {
    pub fn new(contract: models::Contract, rewards: std::collections::HashMap<String, i64>) -> Cancel200Response {
        Cancel200Response {
            contract: Box::new(contract),
            rewards,
            refund: None,
            unlocked_items: None,
        }
    }
}

